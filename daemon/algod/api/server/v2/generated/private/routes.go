// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
