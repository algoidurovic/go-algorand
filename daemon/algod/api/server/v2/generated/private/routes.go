// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameter("simple", false, "participation-id", ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.GET("/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST("/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE("/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET("/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST("/v2/participation/:participation-id", wrapper.AppendKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
